********************************101

2ND VIDEO

Typography
TextMaxLine
Custom Theme Usage
Never use ! operator. use the ?? operator instead of it.
floatingActionButton location
Custom Font Usage (download)
BottomSheet Usage
------------
3rd adn 4th VIDEO 

button size with sizedBox
keep all size values in any dart file.
appBar transparan,elevation property and systemOverLayStyle(operation System staus bar
hotReload adn hotRestart difference
padding values in other dart file.
------------
5th adn 6th VIDEO

Spacer Usage with expanded
stack usage according to responsive design
CustomScrool view
life cycles
textFormField with animetedContainer
pageview with scaffolds
keyboard apperances
TextInputForms
------------
7th VIDEO

debug Usage (inspect)
textScaleFactor and FittedBox
Constrains listView with SizedBox
shrinkWrap with listView
appbar padding for floatig seem
late usage(data will come after run constructor)


********************************202
8th VIDEO

"/$" usage for dollar symbol
the best tabbar usage (keep 8)
enum and extension usage

9th VIDEO

you cannot reach database directly.
what is the service
CRUD with postman
create modelClass
dio usage with baseURL
textInputAction
http Status Code
Querry parameter usage

10th video

package examine. go to source code and search the "channel". if there is it, this package using native plugins. So you gotta set up some plugins
CanLaunch usage with _urlLauncher
separeted the appColors for light or dark theme
Circular corner appBar (youtuibe plant app)
widget size with enum
textFormField obsecure text character

11th
image usage with enum
SizedBox.shrink usage
Animatedopacity
AnimatedIcon 
create own exception
animatedPositioned
implemantation usage
extend usage
mixin usage
extension usage
stateManagement viewModelView(keep 11 last fields)
key types(we using the keys for reach the related widget and its properties)
dropDownButtonFormField

12th
Caching (all datas saves to 2 types. These're database and local)
sharedPrefences usage
initState cannot include async process unlike the extract the method
flutter secure storage keep values even if app delete from device 
jsonEncode and jsonDecode usage (we gonna use compute instead of them, encode and decode use too much ram)
json web token
textFormField enlarge andwith maxline minline

13th

Sheets Usage{
BottomSheets=choosing,filtering etc.
alertDialog=exit,yes/no questions
snackBar=notification for user
}
Xcode describes{
podFile keeps your donwloaded packages of native
in the runner file, you can set up device orientation vertical situations etc
in the ios folder,when click the runner.xcworkspace will open the xcode youp project
bundleIdentifer is your unique key your app.
NOTE: set up your app device orientitation on xcode. So you don't need to call any method from flutter project, and app will be more performance
in the xCode runner/info that is your permissions. for exa add camera permissins. video13 1:16:30
appDelegate is your native ios projects start field.
}
androidStudio describes{
Android/app/strc/main/androidManifest keep your android permissions.
android project start in android/app/rsc.main/kotlin/mainActivity. similar to appDelegate
andoroid/app/rsc/main/res folder keep our app icons.
}

303
use high order functions
List.map.fold for total of all list values. difference usage{1:31;04 video 13
List<double> exaList =
      List.generate(10, (index) => index.toDouble()).toList();
  // int total = exaList
  // .map((e) => e.toInt())
  // .fold(0, (previousValue, element) => previousValue + element);
  int total = exaList.fold(
      0, (previousValue, element) => previousValue + element.toInt());
}
test folder usage
Generics{
that is unknown references or constrians type.
THE BEST EXAMPLE TO UNDERSTAND
----
void main(List<String> args) {
  void sayName<T extends AdminUser>(T data) {
    print("my name is ${data.name}");
  }

  // sayName(User("semih"));
  sayName(AdminUser("Semih"));
}

class User {
  final String? name;
  User(this.name);
}

class AdminUser {
  final String? name;
  AdminUser(this.name);
}
sayName functions doesn't accept the User class.
-----

}

14th VIDEO

*part-partOf{
    that is communication structure from one private file to other private file, but it is't necessary be private file. 
     appbar example from veliBacik: part should be in your view class,part-of that is appBar should be in your custom appBar class.
  part '../Templates/custom_partappbar.dart';
  part of '../view/part_example.dart';
      NOTE: when you use the part of property in any class, that class will take all imports from file that keep part property. I mean, in the CustomAppBar class, we don't need to import material package is becasuse it already becomes from UI class.
 }

*atomic Design with button and callBack function{
you can use callBack function and retunr any value to UI
}

*VoidCallback usage instead of void Function (){}

 * FutureBuilder Usage. is it really necessary to use when we already using state management approach.
 * PlaceHolder Usage
 
 * state keep. on FutureBuilder. For example, think about the FutureBuilder with tabbar. there're 2 tabs on the tabbar. these are incluide futureBuilder and any text. when you tour the these tabs every time FutureBuilder send response to endPoint. that is very important performance problam. AutomaticKeepAliveClientMixin. how can You Use It?{
 "with" use with your class. after that, embed the super.build(context); in your class build method. (setState's build method) and override the  AutomaticKeepAliveClientMixin's properties. So, you must have code lines like that(
 @override
 bool get wantKeepAlive =>true;
 )
 So, from here on, your page always keep current state and it won't resend new response
 
 }
 
 *RESPONSIVE DESING TIPS ON ZEPLIN , think about your servilet app. you gotta think about the small or large device orientations. Normally,you have a 3 card on your servicePoint Card,isn't it? Probably, you made these accodring to responseive design . Perfect. but if your app run on very small device, that 3 card show good I mean these are no any layout problem. but these will be very small. That is problem. in this time, you shoudl think like these cards must be only 2 . becasuse screen is very small. Conclusion, you always think about the device screen. NO layout problem is not everythink. you should think about beautiful and proper seem.
 
 15th VIDEO
 
** advanced postman usage Go to this link and just revise and check:
https://www.youtube.com/watch?v=oCEDjp3XMco

** base service view structure.
regrest_source folder (it's screen base*(name) folder)
      - model (you will kepp your api data models)
      - service (you will keep CRUD operations in here)
      - viewModel (your view controller. actually, we use getXController instead of this.)
      - view (your screen view)
you gotta go this repo and deeply examine each code line:

https://github.com/VB10/Flutter-Full-Learn/tree/main/lib/303/reqrest_resource

I need to explain one by one all file content.
VIEW: https://github.com/VB10/Flutter-Full-Learn/blob/main/lib/303/reqrest_resource/viewModel/req_res_view_model.dart



In conclusion, in the statefulWidgets second class extends our viewModel.

** you shouldn't create more than one HTTP or DIO object or whatever use. Go to this link:
https://github.com/VB10/Flutter-Full-Learn/blob/main/lib/product/service/project_dio.dart

** NEVER USE any logic method in view file. if the code does not seem on the screen, don't use in view file.

**The teacher only has created DIO object in here. After that, he has called this object from here.
** use the extension for String,Int stateful structures. I mean, there is no problem to use with flutter ready structure.For Instance:
https://github.com/VB10/Flutter-Full-Learn/blob/main/lib/product/extension/string_extension.dart

in this link, the teacher has added new property to String class.From here on, if you wanna use the any string variable, you will be able to reach the colorValue. Be carefully the teacher has extended String with nullable property. So, we will be able to use for nullable string values like String? name. Now, name variable use the this property.

** the teacher said that when you wanna create model file, if all values from postman body are not necessary, you can copy only data or necessary fields.

** if you use the stateManagement from outside, you don't have to use viewModel. Provider,Riverpod or Getx does instead of 
viewModel.

** create an project and use the provider in state management folder.

** jsonSerializeble/jsonDeserializeble, build_runner and json_annocation usage. THESE ARE SO IMPORTANT. SEARCH ON THE INTERNET
jsonSerializable: it has createToJson property. it prevents the create toJson method. you should add build_runner to dev_dependency. dev_dependency is not working on app runtime. It's run-in only developing time.

build_runner makes code generation liem artificial intelligent instead of developer.
Go to VB 1:12:24 at 15 video and use on any project.

@JsonSerializable(createToJson: false)

jsonSerializable: other property is filedRename. sometimes api keys are not case sensitive. I mean, you expect value like naemVeli but it would come like name_veli. that's situation, we can use this property.

@JsonSerializable(fieldRename:  FieldRename.... etc)


** equatable



 
 NOTES:
** static values, you can keep static_values file under the static folder.
** best practice api usage{https://www.youtube.com/watch?v=04j8jTJ7j8Q}
** you can keep query parameters query_param file under the a network folder.
** create Global folder for general datas. don't use General.
** MaterialApp title is text which when the app in the task manager, hamburger menu on the device.
** in the flutter root folder, there is a readMe.md file. you can take notes in there.
** you can use the appBundle instead of the APK building. appBundle has many advantages according to Apk.
** .sh Usage. 
create a folder like commands. 
create a file flutter_doctor.sh
inside the that file, flutter doctor and save.
when you wanna call that .sh file on the terminal:
sh /commands/flutter_doctor.sh

 
